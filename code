from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
from base64 import b64encode, b64decode

def encrypt_image(key, input_image_path, output_image_path):
    # Read the image as binary data
    with open(input_image_path, 'rb') as image_file:
        image_data = image_file.read()

    # Generate a random IV (Initialization Vector)
    iv = b'\x00' * 16  # You should use a random IV in a real-world scenario

    # Create an AES cipher object with CBC mode
    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())

    # Encrypt the image data
    encryptor = cipher.encryptor()
    encrypted_image_data = encryptor.update(image_data) + encryptor.finalize()

    # Write the encrypted image data to a new file
    with open(output_image_path, 'wb') as encrypted_image_file:
        encrypted_image_file.write(encrypted_image_data)

def decrypt_image(key, encrypted_image_path, decrypted_image_path):
    # Read the encrypted image as binary data
    with open(encrypted_image_path, 'rb') as encrypted_image_file:
        encrypted_image_data = encrypted_image_file.read()

    # Decode base64 and separate IV and ciphertext
    iv = encrypted_image_data[:16]
    ciphertext = encrypted_image_data[16:]

    # Create an AES cipher object with CBC mode
    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())

    # Decrypt the image data
    decryptor = cipher.decryptor()
    decrypted_image_data = decryptor.update(ciphertext) + decryptor.finalize()

    # Write the decrypted image data to a new file
    with open(decrypted_image_path, 'wb') as decrypted_image_file:
        decrypted_image_file.write(decrypted_image_data)

# Example usage
key = b'Sixteen byte key'  # AES-128 requires a 16-byte key
input_image_path = r'C:\Users\admin\Desktop\image encryption\image.jpg'

encrypted_image_path = 'encrypted_image.jpg'
decrypted_image_path = 'decrypted_image.jpg'

# Encrypt the image
encrypt_image(key, input_image_path, encrypted_image_path)
print(f'Image encrypted and saved to {encrypted_image_path}')

# Decrypt the image
decrypt_image(key, encrypted_image_path, decrypted_image_path)
print(f'Image decrypted and saved to {decrypted_image_path}')
# Reading binary data
with open('image.jpg', 'rb') as file:
    binary_data = file.read()

